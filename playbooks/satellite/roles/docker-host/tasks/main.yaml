---
  - name: "If docker is installed, maybe we are running this playbook on a server where it already ran?"
    shell:
      "! rpm -q docker"

  # TODO Do we need to add possibility to attach to specific pool here?
  - name: "Enable RHEL Extras repo where docker package lives"
    command:
      subscription-manager repos --enable 'rhel-{{ ansible_distribution_major_version }}-server-extras-rpms'

  - name: "docker package installed"
    yum:
      name=docker-1.10.3-59.el7
      state=present

  # Abrt causing load when something fails and we do not care
  - name: "abrt package not present"
    yum:
      name=abrt
      state=absent

  # We are using killall below and generally this is nice to have
  - name: "psmisc package installed"
    yum:
      name: psmisc
      state: present

  # Configure bridge we are going to use
  # https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s2-networkscripts-interfaces_network-bridge.html
  - name: "When docker_host_10gnic is empty, set it to default 'eth1'"
    set_fact:
      docker_host_10gnic: eth1
    when: "docker_host_10gnic is undefined or docker_host_10gnic is none or docker_host_10gnic == ''"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^DEVICE="
      line: "DEVICE={{ docker_host_10gnic }}"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=none"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^TYPE="
      line: "TYPE=Ethernet"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ docker_host_10gnic }}"
      regexp: "^BRIDGE="
      line: "BRIDGE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
      create: yes
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^TYPE="
      line: "TYPE=Bridge"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DELAY="
      line: "DELAY=0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DEVICE="
      line: "DEVICE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=static"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^IPADDR="
      line: "IPADDR={{ ip }}"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NETMASK="
      line: "NETMASK=255.0.0.0"
  - name: "Kill all dhclients (network service was not restarting)"
    command:
      killall dhclient
  - name: "Restart network"
    command:
      service network restart

  # Configure docker networking
  - name: "When docker_host_cidr_range is empty, set it to default '24'"
    set_fact:
      docker_host_cidr_range: 24
    when: "docker_host_cidr_range is undefined or docker_host_cidr_range is none or docker_host_cidr_range == ''"
  - name: "Remove --fixed cidr if any"
    command:
      sed -i "s/ --fixed-cidr=[^ '\"]*//g" /etc/sysconfig/docker
  - name: "If we have static ip specified, add '--fixed-cidr={{ ip }}/{{ docker_host_cidr_range }}' in docker config"
    lineinfile:
      dest: /etc/sysconfig/docker
      regexp: "^OPTIONS=['\"]([^'\"]*)['\"]$"
      line: 'OPTIONS="\1 --fixed-cidr={{ ip }}/{{ docker_host_cidr_range }}"'
      backrefs: yes
    when: "ip is defined"

  # Configure docker storage
  - name: "docker service not running"
    service:
      name: docker
      state: stopped
      enabled: yes
  - name: "No docker-pool present"
    shell: |
      lvs --separator ':' "/dev/mapper/{{ docker_host_vg }}" | grep '^\s*docker-pool:' \
        && lvremove --force "/dev/mapper/{{ docker_host_vg }}-docker--pool" || true
  - name: "Docker storage related config ready to be recreated"
    shell: |
      rm -rf /var/lib/docker
      rm -f /etc/sysconfig/docker-storage
  - name: "docker-storage-setup configured to use our new volume group"
    lineinfile:
      dest: /etc/sysconfig/docker-storage-setup
      regexp: "^VG="
      line: "VG='{{ docker_host_vg }}'"
  - name: "docker-storage-setup"
    command:
      docker-storage-setup

  - name: "docker service restarted to use new settings"
    service:
      name: docker
      state: restarted
      enabled: yes

  # Build container we will use
  - name: "Dockerfile for base container present"
    copy:
      src: Dockerfile
      dest: /root/Dockerfile
  - name: "Base container built"
    shell:
      docker build -t r7perfsat - < /root/Dockerfile

  # Install and preconfigure Ansible
  - name: "EPEL enabled"
    yum:
      name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
      state: present
  - name: "Package ansible installed"
    yum:
      name: ansible
      state: installed
  - name: "Ansible should not check host keys"
    lineinfile:
      dest: /etc/ansible/ansible.cfg
      regexp: '^.*host_key_checking'
      line: 'host_key_checking = False'
      state: present

  # Screen is also very useful
  - name: "Install screen"
    yum:
      name: screen
      state: installed
...

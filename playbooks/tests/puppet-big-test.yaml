---
- hosts: docker-hosts
  remote_user: root
  gather_facts: no
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  vars:
    size: 1   # should be provided via external parameter
    forks: "{{ size }}"   # in how many forks should playbooks run?
    use_only_fresh: true   # should we use only containers which were not registered yet?
    update_used: true   # once we use containers, should we update /root/containers-used-count?
    grepper: PickupPuppet
    content_puppet_env: KT_Default_Organization_Library_SatPerfContentViewPuppetRealModules_3
    content_puppet_module_name: acl,apache,archive,firewalld,gcc,haproxy,java,limits,motd,nsswitch,ntp,pam,rsyslog,ssh,sysstat,tomcat
  tasks:
    - name: "Deploy docker host side of big puppet test"
      template:
        src: puppet-big-client.yaml.j2
        dest: /root/puppet-big-client.yaml
        validate: python -c 'import yaml; print yaml.safe_load(open("%s", "r"))'

    - name: "Ansible on docker host configured to ignore host keys"
      command:   # FIXME: Use lineinfile
        sed -i 's|^.*host_key_checking.*$|host_key_checking = False|' /etc/ansible/ansible.cfg

    - name: "Load number of already registered containers"
      command:
        cat /root/container-used-count
      register: containers_used_count_cmd
      ignore_errors: true
      when: "use_only_fresh|bool"
    - name: "Set number of used containers to 0"
      set_fact:
        containers_used_count: 0
    - name: "Set number of used containers based on file"
      set_fact:
        containers_used_count: "{{ containers_used_count_cmd.stdout|int }}"   # Warning: this is still string: https://github.com/ansible/ansible/issues/15249
      when: "use_only_fresh|bool and (containers_used_count_cmd.rc is defined and containers_used_count_cmd.rc == 0)"

    - name: "Generate list of containers we are going to use"
      shell:
        head -n "{{ containers_used_count|int + size|int }}" /root/container-ips.shuffled | tail -n "{{ size }}" | cut -d ' ' -f 2 > clients.ini
    - name: "Determine marker variable"
      set_fact:
        marker: "{{ lookup('pipe', 'date --utc --iso-8601=seconds') }}"
      run_once: yes

    - name: "Determine log name for setup"
      set_fact:
        setup_cmd_log: "/root/out-puppet-big-setup-{{ marker }}.log"
      run_once: yes
    - name: "Run puppet-big-client.yaml (log = {{ setup_cmd_log }}; tags = SETUP)"
      shell:
        ansible-playbook --private-key /root/id_rsa_key -f "{{ forks|default(size) }}" -i clients.ini --extra-vars "server='{{ tests_registration_target|default(groups['satellite6']|first) }}' content_puppet_env='KT_Default_Organization_Library_SatPerfContentViewPuppetRealModules_3' content_puppet_module_name='acl,apache,archive,autofs,firewalld,gcc,haproxy,java,limits,motd,nsswitch,ntp,pam,rsyslog,ssh,sysstat,tomcat'" --tags "SETUP" puppet-big-client.yaml &> "{{ setup_cmd_log }}"
      register: setup_cmd
      ###ignore_errors: true

    - name: "Determine log name for deploy"
      set_fact:
        deploy_cmd_log: "/root/out-puppet-big-deploy-{{ marker }}.log"
      run_once: yes
    - name: "Run puppet-big-client.yaml (log = {{ deploy_cmd_log }}; tags = DEPLOY)"
      shell:
        ansible-playbook --private-key /root/id_rsa_key -f "{{ forks|default(size) }}" -i clients.ini --extra-vars "server='{{ tests_registration_target|default(groups['satellite6']|first) }}' content_puppet_env='KT_Default_Organization_Library_SatPerfContentViewPuppetRealModules_3' content_puppet_module_name='acl,apache,archive,autofs,firewalld,gcc,haproxy,java,limits,motd,nsswitch,ntp,pam,rsyslog,ssh,sysstat,tomcat'" --tags "DEPLOY" puppet-big-client.yaml &> "{{ deploy_cmd_log }}"
      register: deploy_cmd
      ignore_errors: true

    - name: "Get how long '{{ grepper }}' took"
      shell:
        grep '"msg". "{{ grepper }}' "{{ deploy_cmd_log }}" | cut -d '"' -f 4
      register: clients_yaml_grepper_timings
      when: "grepper != ''"
    - name: "Append '{{ grepper }}' timings to central list"
      set_fact:
        grepper_times: "{{ grepper_times|default([]) + hostvars[item]['clients_yaml_grepper_timings']['stdout_lines'] }}"
      with_items: "{{ ansible_play_batch }}"
      run_once: true
      when: "grepper != ''"
    - name: "Show how long '{{ grepper }}' took"
      debug:
        var: grepper_times
      run_once: true
      when: "grepper != ''"
    - name: "Show number of successful '{{ grepper }}' events"
      debug:
        var: grepper_times|length
      run_once: true
      when: "grepper != ''"

    - name: "Increment number of already registered containers"
      shell:   # FIXME: Use lineinfile or so
        echo "{{ containers_used_count|int + size|int }}" >/root/container-used-count
      when: "update_used|bool"
...

---
- hosts: container_hosts
  gather_facts: false
  vars:
    target: "{{ groups['satellite6'] | first  }}"
    spawn_rate: 10
    ui_concurrency: 10
    ui_duration: 10   # duration needs to be in sec (we need it to be integer, not things like '10s' or '5m')
    ui_max_static_size: 1024   # only run for these requests with content size <= this limit
  tasks:
    - name: "Show settings"
      ansible.builtin.debug:
        msg:
          - "target = {{ target }}"
          - "spawn_rate = {{ spawn_rate }}"
          - "ui_concurrency = {{ ui_concurrency }}"
          - "ui_duration = {{ ui_duration }}"
          - "ui_max_static_size = {{ ui_max_static_size }}"
      run_once: true

    - name: "Determine HW info"
      ansible.builtin.setup:
        gather_subset: hardware
      when:
        - ansible_processor_vcpus is not defined

    - name: "Determine total number of followers per host"
      ansible.builtin.set_fact:
        locust_per_host_followers: "{{ (ansible_processor_vcpus / 1) | int }}"   # to be able to experiment with e.g. only half of processes than CPU cores

    - name: "Determine total number of followers"
      ansible.builtin.set_fact:
        locust_followers_count: "{{ locust_followers_count | default(0) | int + hostvars[item]['locust_per_host_followers'] | int }}"
        locust_leader: "{{ groups['container_hosts'] | first }}"
      run_once: true
      loop: "{{ groups['container_hosts'] }}"

    - name: "Show test configuration"
      ansible.builtin.debug:
        msg:
          - "Leader: {{ locust_leader }}"
          - "Total number of follower: {{ locust_followers_count }}"
          - "Settings: target={{ target }} ui_concurrency={{ ui_concurrency }} ui_duration={{ ui_duration | int }}"
      run_once: true

    - name: "Set nofile soft limit for the user root"
      community.general.pam_limits:
        domain: root
        limit_type: soft
        limit_item: nofile
        value: 32768
      tags:
        - setup

    - name: "Set nofile hard limit for the user root"
      community.general.pam_limits:
        domain: root
        limit_type: hard
        limit_item: nofile
        value: 65536
      tags:
        - setup

    - name: "Install python"
      ansible.builtin.package:
        name:
          - python3.11
          - python3.11-pip
        state: present
      tags:
        - setup

    - name: "Create venv"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          python3 -m venv venv

          source venv/bin/activate

          python3 -m pip install -U pip
          python3 -m pip install -e 'git+https://github.com/redhat-performance/opl.git#egg=opl-rhcloud-perf-team'
      tags:
        - setup

    - name: "Deploy test script"
      ansible.builtin.copy:
        src: webui-pages.py
        dest: /root/webui-pages.py
        mode: '0755'
        force: true
      tags:
        - setup

    - name: "Open port Locust port on leader"
      ansible.builtin.command:
        cmd: |
          firewall-cmd --add-port 5557/tcp
      when:
        - inventory_hostname == locust_leader
      tags:
        - setup

    - name: "Cleanup locust processes"
      ansible.builtin.command:
        cmd: |
          killall locust
      ignore_errors: true

    - name: "Start Locust leader"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          export STATUS_DATA_FILE=/tmp/status-data.json
          rm -rf $STATUS_DATA_FILE
          export PYTHONWARNINGS="ignore:Unverified HTTPS request"

          source venv/bin/activate

          python3 webui-pages.py \
            --locust-host https://{{ target }} \
            --locust-hatch-rate {{ spawn_rate | int }} \
            --locust-num-clients {{ ui_concurrency | int }} \
            --locust-stop-timeout 100 \
            --locust-master-runner \
            --locust-master-expect-workers {{ locust_followers_count }} \
            --test-set SatelliteWebUIPerfStaticAssets \
            --test-url-suffix / \
            --test-duration {{ ui_duration | int }} \
            --satellite-max-static-size {{ ui_max_static_size | int }} \
            --satellite-version {{ sat_version }} |&
            tee /root/locust-leader.log
      async: "{{ (ui_duration | float * 1.1 + ansible_processor_vcpus * 10) | int }}"   # maximum duration in seconds this task should be running, formulla is just a guess
      poll: 0   # with "poll: 0" we start the task and immediately move on to the next task without waiting for a result
      register: locust_leader_process
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - name: "Start Locust followers"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          source venv/bin/activate

          python3 webui-pages.py \
            --locust-host https://{{ target }} \
            --locust-hatch-rate {{ spawn_rate | int }} \
            --locust-num-clients {{ ui_concurrency | int }} \
            --locust-stop-timeout 100 \
            --locust-worker-runner \
            --locust-worker-master-host {{ groups['container_hosts'] | first }} \
            --test-set SatelliteWebUIPerfStaticAssets \
            --test-url-suffix / \
            --test-duration {{ ui_duration | int }} \
            --satellite-max-static-size {{ ui_max_static_size | int }} \
            --satellite-version {{ sat_version }} |&
            tee /root/locust-follower-{{ item }}.log
      async: "{{ (ui_duration | float * 1.1 + 60 + 30) | int }}"   # fire and forget
      poll: 0
      loop: "{{ range(locust_per_host_followers | int) | list }}"

    - name: "Wait for Locust leader to finish running the test"
      ansible.builtin.async_status:
        jid: "{{ locust_leader_process.ansible_job_id }}"
      register: locust_leader_result
      until: locust_leader_result.finished
      retries: "{{ ((ui_duration | float * 1.1 + 10) / 10) | int }}"
      delay: 10
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - debug:
        var: locust_leader_result.stdout_lines
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - name: "Show output"
      ansible.builtin.debug:
        msg: "{{ ['========== Standard output =========='] + locust_leader_result.stdout_lines + ['', '========== Standard error output =========='] + locust_leader_result.stderr_lines }}"
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - name: "Fetch status data file from remote host"
      ansible.builtin.fetch:
        src: "/tmp/status-data.json"
        dest: "/tmp/status-data-webui-static-distributed.json"
        flat: true
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - name: "Calculate run duration"
      ansible.builtin.set_fact:
        test_cmd_duration: "{{ (locust_leader_result.end | to_datetime('%Y-%m-%d %H:%M:%S.%f')).timestamp() - (locust_leader_result.start | to_datetime('%Y-%m-%d %H:%M:%S.%f')).timestamp() }}"
      when:
        - inventory_hostname == groups['container_hosts'] | first

    - name: "Print results"
      ansible.builtin.debug:
        msg: "WebUIStaticDistributedTest_c{{ ui_concurrency }}_d{{ ui_duration }} {{ locust_leader_result.start }} to {{ locust_leader_result.end }} taking {{ test_cmd_duration }} seconds"
      when:
        - inventory_hostname == groups['container_hosts'] | first
...

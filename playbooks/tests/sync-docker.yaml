# This test creates and synces 8 repos, creates and publishes 8 CVs each with
# one repo, creates lifecycle environment and publishes these repos into it.
#
# To cleanup:
#
# hammer lifecycle-environment delete --name test_sync_docker_le --organization-id 1
# for cv_id in $( hammer --output csv --no-headers content-view list --search 'label ~ test_sync_docker_cv' | cut -d ',' -f 1 ); do
#     hammer content-view remove-from-environment --id $cv_id --lifecycle-environment Library --organization-id 1
#     hammer content-view delete --id $cv_id --organization-id 1
# done
# sleep 30
# hammer product delete --organization-id 1 --name test_sync_docker_product
---
- hosts: satellite6
  gather_facts: False
  vars:
    test_sync_docker_count: 2
    test_sync_docker_url_template: "https://registry-1.docker.io/"
    test_sync_docker_product: "test_sync_docker_product"
    test_sync_docker_le: "test_sync_docker_le"
    test_sync_docker_repo_template: "test_sync_docker_repo*"
    test_sync_docker_cv_template: "test_sync_docker_cv*"
    test_sync_docker_upstream_template: "test_repo*"   # FIXME - no asterisk here means all repos with same upstream repo
    test_sync_docker_max_sync_secs: 3600
  roles:
    - wait-for-task-script
  tasks:
    - name: "Create product"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" product create --organization "{{ organization }}" --name "{{ test_sync_docker_product }}"
      register: create_product
      failed_when:
        - create_product.rc != 0
        - "'Name has already been taken for a product in this organization' not in create_product.stderr"
      changed_when:
        - create_product.rc == 0
        - "'Product created' in create_product.stdout"

    - name: "Create repos"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" repository create --organization "{{ organization }}" --product "{{ test_sync_docker_product }}" --content-type docker --name "{{ test_sync_docker_repo_template | replace('*', item) }}" --url "{{ test_sync_docker_url_template | replace('*', item) }}" --docker-upstream-name "{{ test_sync_docker_upstream_template | replace('*',item) }}"
      register: create_repo
      loop: "{{ range(1, test_sync_docker_count | int + 1) | list }}"

    # Sync
    - name: "Start sync asynchronously"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" repository synchronize --organization "{{ organization }}" --product "{{ test_sync_docker_product }}" --name "{{ test_sync_docker_repo_template | replace('*', item) }}" --async
      loop: "{{ range(1, test_sync_docker_count | int + 1) | list }}"
      register: start_sync
      ignore_errors: true

    - name: "Check that start message is sane"
      ansible.builtin.assert:
        that: "'Repository is being synchronized in task' in item.stdout"
        msg: 'Pass'
        quiet: yes
      loop: "{{ start_sync.results }}"
      loop_control:
        label: "{{ test_sync_docker_repo_template | replace('*', item.item) }}"

    - name: "Wait for synces to finish"
      ansible.builtin.command:
        cmd: |
          /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[6].split('.')[0] }}" "{{ test_sync_docker_max_sync_secs }}"
      loop: "{{ start_sync.results }}"
      loop_control:
        label: "{{ test_sync_docker_repo_template | replace('*', item.item) }}"
      register: wait_sync
      ignore_errors: yes

    - name: "Print sync results"
      ansible.builtin.debug:
        msg: "SyncRepositories {{ item.stdout_lines[-3] }} to {{ item.stdout_lines[-2] }} taking {{ item.stdout_lines[-1] }} seconds"
      loop: "{{ wait_sync.results }}"
      when: "item.rc is defined and item.rc == 0"

    - name: "Create lifecycle environment"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" lifecycle-environment create --organization "{{ organization }}" --prior Library --name "{{ test_sync_docker_le }}"
      register: create_le

    - name: "Create content views"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view create --organization "{{ organization }}" --name "{{ test_sync_docker_cv_template | replace('*', item) }}"
      register: create_cv
      loop: "{{ range(1, test_sync_docker_count | int + 1) | list }}"

    # Publish
    - name: "Publish content views"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view publish --async --organization "{{ organization }}" --name "{{ test_sync_docker_cv_template | replace('*', item) }}"
      register: start_publish
      loop: "{{ range(1, test_sync_docker_count | int + 1) | list }}"

    - name: "Wait for publish to finish"
      ansible.builtin.command:
        cmd: |
          /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[7].split('.')[0] }}" "{{ test_sync_docker_max_sync_secs }}"
      loop: "{{ start_publish.results }}"
      loop_control:
        label: "{{ test_sync_docker_cv_template | replace('*', item.item) }}"
      register: wait_publish
      ignore_errors: yes

    - name: "Print publish results"
      ansible.builtin.debug:
        msg: "PublishContentViews {{ item.stdout_lines[-3] }} to {{ item.stdout_lines[-2] }} taking {{ item.stdout_lines[-1] }} seconds"
      loop: "{{ wait_publish.results }}"
      when: "item.rc is defined and item.rc == 0"

    # Promote
    - name: "Promote content views"
      ansible.builtin.command:
        cmd: |
          hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view version promote --async --organization "{{ organization }}" --content-view "{{ test_sync_docker_cv_template | replace('*', item) }}" --version "1.0" --to-lifecycle-environment "{{ test_sync_docker_le }}"
      register: start_promote
      loop: "{{ range(1, test_sync_docker_count | int + 1) | list }}"

    - name: "Wait for promote to finish"
      ansible.builtin.command:
        cmd: |
          /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[7].split('.')[0] }}" "{{ test_sync_docker_max_sync_secs }}"
      loop: "{{ start_promote.results }}"
      loop_control:
        label: "{{ test_sync_docker_cv_template | replace('*', item.item) }}"
      register: wait_promote
      ignore_errors: yes

    - ansible.builtin.debug:
        var: wait_promote

    - name: "Print promote results"
      ansible.builtin.debug:
        msg: "PromoteContentViews {{ item.stdout_lines[-3] }} to {{ item.stdout_lines[-2] }} taking {{ item.stdout_lines[-1] }} seconds"
      loop: "{{ wait_promote.results }}"
      when: "item.rc is defined and item.rc == 0"
...                                                                  

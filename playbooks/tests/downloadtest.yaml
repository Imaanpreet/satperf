---
- hosts: satellite6
  gather_facts: false
  tasks:
    - name: "Start dnf download job"
      ansible.builtin.shell:
        cmd: |
          hammer job-invocation create --async --description-format 'Run %{command} (%{template_name})' --inputs command='dnf download --downloadonly --downloaddir=\"/var/tmp\" {{ package_name_download_test }}' --job-template "{{ job_template_ssh_default }}" --search-query 'name ~ container' &
          sleep 30

    - name: "Get last job ID"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          hammer --csv job-invocation list  | cut -d ',' -f 1 | grep '^[0-9]*$' | sort -n | tail -n 1
      register: last_job_id_cmd

    - ansible.builtin.debug: var=last_job_id_cmd

    - name: "Set last job ID"
      ansible.builtin.set_fact:
        last_job_id: "{{ last_job_id_cmd.stdout_lines[0] | int }}"

    - name: "Distribute private key"
      ansible.builtin.copy:
        src: files/wait-for-job.py
        dest: /root/wait-for-job.py
        mode: "u=rwx,g=rx,o=rx"
        force: true

    - name: Install simpleJson
      ansible.builtin.pip:
        name: simpleJson

    - name: "Wait for job {{ last_job_id }} to finish"
      ansible.builtin.shell:
        cmd: |
          /usr/libexec/platform-python /root/wait-for-job.py \
            "{{ sat_user }}" \
            "{{ sat_pass }}" \
            "https://{{ groups['satellite6'] | first }}" \
            "{{ last_job_id }}" \
            "{{ max_age_task }}"
      register: wait_for_job_cmd
      ignore_errors: true
      until: wait_for_job_cmd is not failed
      retries: 5
      delay: 60

    - name: "Parse script result"
      ansible.builtin.set_fact:
        pass_count:   "{{ ((wait_for_job_cmd.stdout_lines|last).split())[2] | int }}"
        total_count:  "{{ ((wait_for_job_cmd.stdout_lines|last).split())[4] | int }}"
        start_time:   "{{ ((wait_for_job_cmd.stdout_lines|last).split())[6] + ' ' + ((wait_for_job_cmd.stdout_lines | last).split())[7] }}"
        end_time:     "{{ ((wait_for_job_cmd.stdout_lines|last).split())[9] + ' ' + ((wait_for_job_cmd.stdout_lines | last).split())[10] }}"
        test_time:    "{{ ((wait_for_job_cmd.stdout_lines|last).split())[13] | int }}"
        avg_duration: "{{ ((wait_for_job_cmd.stdout_lines|last).split())[15] | int }}"

    - name: "Show what we have parsed"
      ansible.builtin.debug:
        msg: "RESULT: pass_count: {{ pass_count }}; total_count: {{ total_count }}; start_time: {{ start_time }}; end_time: {{ end_time }}; test_time: {{ test_time }}; avg_duration: {{ avg_duration }}"

    - name: "Give server some time to rest"
      ansible.builtin.pause:
        seconds: 30

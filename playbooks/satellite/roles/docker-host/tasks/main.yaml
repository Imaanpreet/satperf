---
  - name: "If docker is installed, maybe we are running this playbook on a server where it already ran?"
    shell:
      "! rpm -q docker"

  # TODO Do we need to add possibility to attach to specific pool here?
  - name: "Enable RHEL Extras repo where docker package lives"
    command:
      subscription-manager repos --enable 'rhel-{{ ansible_distribution_major_version }}-server-extras-rpms'

  - name: "docker package installed"
    yum:
      name=docker
      state=present

  # Abrt causing load when something fails and we do not care
  - name: "abrt package not present"
    yum:
      name=abrt
      state=absent

  # Configure bridge we are going to use
  # https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s2-networkscripts-interfaces_network-bridge.html
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^DEVICE="
      line: "DEVICE=eth1"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=none"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^TYPE="
      line: "TYPE=Ethernet"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      regexp: "^BRIDGE="
      line: "BRIDGE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
      create: yes
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^TYPE="
      line: "TYPE=Bridge"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DELAY="
      line: "DELAY=0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DEVICE="
      line: "DEVICE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=static"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^IPADDR="
      line: "IPADDR={{ ip }}"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NETMASK="
      line: "NETMASK=255.0.0.0"
  - name: "Kill all dhclients (network service was not restarting)"
    command:
      killall dhclient
  - name: "Restart network"
    command:
      service network restart

  # Configure docker networking
  # TODO When ran multiple times, it is added again and again
  # TODO Bridge still needs to be reconfigured manually
  - name: "If we have static ip specified, add '--fixed-cidr={{ ip }}/24' in docker config"
    lineinfile:
      dest: /etc/sysconfig/docker
      regexp: "^OPTIONS=['\"]([^'\"]*)['\"]$"
      line: 'OPTIONS="\1 --fixed-cidr={{ ip }}/24"'
      backrefs: yes
    when: "ip is defined"

  # Configure docker storage
  - name: "Check '{{ docker_host_vg }}' volume group is present (check 'docker-host-kvm-partitioning' or 'docker-host-ec2-partitioning' roles and alter as per your needs and enable in docker-host.yaml)"
    command:
      vgdisplay "{{ docker_host_vg }}"
  - name: "docker service not running"
    service:
      name: docker
      state: stopped
      enabled: yes
  - name: "Docker storage related config ready to be recreated"
    shell: |
      rm -rf /var/lib/docker
      rm -f /etc/sysconfig/docker-storage
  - name: "docker-storage-setup configured to use our new volume group"
    lineinfile:
      dest: /etc/sysconfig/docker-storage-setup
      regexp: "^VG="
      line: "VG='{{ docker_host_vg }}'"
  - name: "docker-storage-setup"
    command:
      docker-storage-setup

  - name: "docker service restarted to use new settings"
    service:
      name: docker
      state: restarted
      enabled: yes

  # Build container we will use
  - name: "Dockerfile for base container present"
    copy:
      src: Dockerfile
      dest: /root/Dockerfile
  - name: "Base container built"
    shell:
      docker build -t r7perfsat - < /root/Dockerfile

  # Install and preconfigure Ansible
  - name: "EPEL enabled"
    yum:
      name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
      state: present
  - name: "Package ansible installed"
    yum:
      name: ansible
      state: installed
  - name: "Ansible should not check host keys"
    lineinfile:
      dest: /etc/ansible/ansible.cfg
      regexp: '^.*host_key_checking'
      line: 'host_key_checking = False'
      state: present

  # Screen is also very useful
  - name: "Install screen"
    yum:
      name: screen
      state: installed
...

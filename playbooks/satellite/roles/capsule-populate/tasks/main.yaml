---
- name: "Get capsule ID"
  ansible.builtin.command:
    cmd: hammer --no-headers -u {{ sat_user }} -p {{ sat_pass }} capsule list --fields id --search 'name = {{ inventory_hostname }}'
  delegate_to: "{{ groups['satellite6'] | first }}"
  register: capsule_id_cmd

- name: "Set capsule ID and lifecycle environment (LCE) name"
  ansible.builtin.set_fact:
    id: "{{ capsule_id_cmd.stdout_lines[0] }}"
    lces: "{{ lces | default('Library') }}"

- name: "Assign capsule to organization '{{ organization }}'"
  # No error seen until now
  throttle: 1
  ansible.builtin.command:
    cmd: "hammer -u {{ sat_user }} -p {{ sat_pass }} capsule update --id '{{ id }}' --organizations '{{ organization }}'"
  delegate_to: "{{ groups['satellite6'] | first }}"

- name: "Set capsule download policy to immediate"
  # XXX: Submit PR
  throttle: 1
  ansible.builtin.command:
    cmd: "hammer -u {{ sat_user }} -p {{ sat_pass }} capsule update --id '{{ id }}' --download-policy immediate"
  delegate_to: "{{ groups['satellite6'] | first }}"
  when: "download_policy is defined and download_policy == 'immediate'"

- name: "Assign lifecycle environments"
  # XXX: Submit PR
  throttle: 1
  ansible.builtin.shell: |
    for LCE in $(echo "{{ lces }}" | tr ',' ' '); do
      if ! hammer --no-headers -u {{ sat_user }} -p {{ sat_pass }} capsule content lifecycle-environments --organization '{{ organization }}' --id '{{ id }}' --fields name | grep -q ^"$LCE"$; then
        if hammer --no-headers -u {{ sat_user }} -p {{ sat_pass }} capsule content available-lifecycle-environments --organization '{{ organization }}' --id '{{ id }}' --fields name | grep -q ^"$LCE"$; then
          hammer -u {{ sat_user }} -p {{ sat_pass }} capsule content add-lifecycle-environment --organization '{{ organization }}' --id '{{ id }}' --lifecycle-environment "$LCE"
        fi
      fi
    done
  delegate_to: "{{ groups['satellite6'] | first }}"

- name: "Sync the content (async)"
  ansible.builtin.command:
    cmd: "hammer -u {{ sat_user }} -p {{ sat_pass }} capsule content synchronize --organization '{{ organization }}' --id '{{ id }}' --skip-metadata-check true --async"
  delegate_to: "{{ groups['satellite6'] | first }}"

- name: "Set delay period in minutes"
  ansible.builtin.set_fact:
    delay_minutes: 15

- name: "Set number of busy-wait retries"
  ansible.builtin.set_fact:
    num_retries: "{{ ( 60 / delay_minutes | int ) * ( num_concurrent_capsules | default(4) | int + 1 ) }}"

- name: "Wait for the content to be synchronized for up to {{ delay_minutes | int * num_retries | int }} minutes"
  ansible.builtin.command:
    cmd: "hammer -u {{ sat_user }} -p {{ sat_pass }} capsule content synchronization-status --organization '{{ organization }}' --id '{{ id }}'"
  delegate_to: "{{ groups['satellite6'] | first }}"
  register: syncstatus_cmd
  until: syncstatus_cmd.stdout.find("Capsule is synchronized") != -1
  delay: "{{ 60 * delay_minutes | int }}"
  retries: "{{ num_retries | int }}"
...
